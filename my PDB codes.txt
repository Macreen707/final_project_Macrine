-- Sequences for ID auto-increment
CREATE SEQUENCE trials_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE sites_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE investigators_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE patients_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE observations_seq START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE events_seq START WITH 1 INCREMENT BY 1;
-- Trial Table
CREATE TABLE trials (
    trial_id NUMBER PRIMARY KEY,
    trial_name VARCHAR2(100) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE,
    status VARCHAR2(50) CHECK (status IN ('Planned', 'Ongoing', 'Completed', 'Terminated'))
);

-- Site Table
CREATE TABLE sites (
    site_id NUMBER PRIMARY KEY,
    site_name VARCHAR2(100) NOT NULL,
    location VARCHAR2(100)
);

-- Investigator Table
CREATE TABLE investigators (
    investigator_id NUMBER PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    specialty VARCHAR2(100),
    site_id NUMBER,
    FOREIGN KEY (site_id) REFERENCES sites(site_id)
);

-- Patient Table
CREATE TABLE patients (
    patient_id NUMBER PRIMARY KEY,
    name VARCHAR2(100) NOT NULL,
    dob DATE NOT NULL,
    gender CHAR(1) CHECK (gender IN ('M', 'F')),
    trial_id NUMBER,
    FOREIGN KEY (trial_id) REFERENCES trials(trial_id)
);

-- Observations Table
CREATE TABLE observations (
    obs_id NUMBER PRIMARY KEY,
    patient_id NUMBER,
    visit_date DATE NOT NULL,
    observation CLOB,
    FOREIGN KEY (patient_id) REFERENCES patients(patient_id)
);

-- Adverse Events Table
CREATE TABLE adverse_events (
    event_id NUMBER PRIMARY KEY,
    patient_id NUMBER,
    event_date DATE NOT NULL,
    description CLOB,
    severity VARCHAR2(50) CHECK (severity IN ('Mild', 'Moderate', 'Severe', 'Fatal')),
    FOREIGN KEY (patient_id) REFERENCES patients(patient_id)
);
CREATE OR REPLACE PACKAGE trial_pkg AS
    PROCEDURE add_patient(p_name VARCHAR2, p_dob DATE, p_gender CHAR, p_trial_id NUMBER);
    FUNCTION is_adult(p_dob DATE) RETURN BOOLEAN;
    PROCEDURE add_observation(p_patient_id NUMBER, p_visit_date DATE, p_note CLOB);
    PROCEDURE report_adverse_event(p_patient_id NUMBER, p_event_date DATE, p_desc CLOB, p_severity VARCHAR2);
END trial_pkg;
/
CREATE OR REPLACE PACKAGE BODY trial_pkg AS

    FUNCTION is_adult(p_dob DATE) RETURN BOOLEAN IS
        v_age NUMBER;
    BEGIN
        v_age := FLOOR(MONTHS_BETWEEN(SYSDATE, p_dob) / 12);
        RETURN v_age >= 18;
    END;

    PROCEDURE add_patient(p_name VARCHAR2, p_dob DATE, p_gender CHAR, p_trial_id NUMBER) IS
    BEGIN
        IF is_adult(p_dob) THEN
            INSERT INTO patients (patient_id, name, dob, gender, trial_id)
            VALUES (patients_seq.NEXTVAL, p_name, p_dob, p_gender, p_trial_id);
        ELSE
            RAISE_APPLICATION_ERROR(-20001, 'Patient must be at least 18 years old.');
        END IF;
    END;

    PROCEDURE add_observation(p_patient_id NUMBER, p_visit_date DATE, p_note CLOB) IS
    BEGIN
        INSERT INTO observations (obs_id, patient_id, visit_date, observation)
        VALUES (observations_seq.NEXTVAL, p_patient_id, p_visit_date, p_note);
    END;

    PROCEDURE report_adverse_event(p_patient_id NUMBER, p_event_date DATE, p_desc CLOB, p_severity VARCHAR2) IS
    BEGIN
        IF p_severity NOT IN ('Mild', 'Moderate', 'Severe', 'Fatal') THEN
            RAISE_APPLICATION_ERROR(-20002, 'Invalid severity level.');
        END IF;

        INSERT INTO adverse_events (event_id, patient_id, event_date, description, severity)
        VALUES (events_seq.NEXTVAL, p_patient_id, p_event_date, p_desc, p_severity);
    END;

END trial_pkg;
/
CREATE OR REPLACE TRIGGER trg_patients_audit
AFTER INSERT OR UPDATE OR DELETE ON patients
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        DBMS_OUTPUT.PUT_LINE('New patient added: ' || :NEW.name);
    ELSIF UPDATING THEN
        DBMS_OUTPUT.PUT_LINE('Patient updated: ' || :OLD.name || ' -> ' || :NEW.name);
    ELSIF DELETING THEN
        DBMS_OUTPUT.PUT_LINE('Patient deleted: ' || :OLD.name);
    END IF;
END;
/
